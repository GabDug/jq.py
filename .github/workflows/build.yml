name: Build

on: [push, pull_request]

jobs:
  tests:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-20.04, macos-13]
        python-version: [3.6, 3.7, 3.8, 3.9, "3.10", "3.11", "3.12", "pypy-3.7"]
        use-system-libs: [false]
        include:
          - os: ubuntu-20.04
            python-version: "3.11"
            use-system-libs: true

    steps:

    - uses: actions/checkout@v4

    - name: Use Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - run: pip install tox virtualenv

    - run: "make jq.c"

    - run: tox -e py
      if: ${{ !matrix.use-system-libs }}

    - run: |
        # Remove deps to make sure they're not being used
        rm -r deps

        sudo apt-get install -y libjq-dev libonig-dev

        JQPY_USE_SYSTEM_LIBS=1 tox -e py
      if: ${{ matrix.use-system-libs }}

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        name: Use Python 3.11
        with:
          python-version: '3.11'

      - run: make jq.c

      - run: pip install build twine

      - name: Build sdist
        run: python -m build --sdist

      - name: Check metadata
        run: python -m twine check dist/*

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  build_wheels_matrix:
    name: Generate matrix for building wheels
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      matrix_win: ${{ steps.set-matrix.outputs.matrix_win }}

    steps:

      - uses: actions/checkout@v4

      - name: Use Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.17.0

      - id: set-matrix
        env:
          CIBW_ARCHS_LINUX: "auto aarch64"
          CIBW_ARCHS_MACOS: "auto"

        run: |
          MATRIX=$(
            {
              cibuildwheel --print-build-identifiers --platform linux \
                | sed 's/.*/{"cibw-only": "&", "os": "ubuntu-20.04"}/' \
              && cibuildwheel --print-build-identifiers --platform macos \
                | sed 's/.*/{"cibw-only": "&", "os": "macos-13" }/'
            } | jq --slurp --compact-output '{"include": .}'
          )
          echo matrix="$MATRIX" >> $GITHUB_OUTPUT

          MATRIX_WIN=$(
            {
              env CIBW_SKIP="pp* cp36*" cibuildwheel --print-build-identifiers --platform windows \
              | sed 's/.*/{"cibw-only": "&", "os": "windows-latest" }/' 
            } | jq --slurp --compact-output '{"include": .}'
          )
          echo matrix_win="$MATRIX_WIN" >> $GITHUB_OUTPUT

  build_wheels:
    name: Build ${{ matrix.cibw-only }} wheel

    needs: build_wheels_matrix

    strategy:
      matrix: ${{ fromJson(needs.build_wheels_matrix.outputs.matrix) }}

    runs-on: ${{ matrix.os }}

    steps:

    - uses: actions/checkout@v4

    - name: Use Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Set up QEMU
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v2
      with:
        platforms: all

    - name: Print build identifiers
      run: |
        python -m pip install cibuildwheel==2.17.0
        python -m cibuildwheel --only ${{ matrix.cibw-only }} --print-build-identifiers

    - name: Build wheels
      # if: ${{ (github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')) || matrix.cibw-only == 'cp310-manylinux_x86_64' }}
      uses: pypa/cibuildwheel@v2.17.0
      with:
        only: ${{ matrix.cibw-only }}

    - uses: actions/upload-artifact@v3
      # if: ${{ (github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')) || matrix.cibw-only == 'cp310-manylinux_x86_64' }}
      with:
        path: ./wheelhouse/*.whl

  build_wheels_win:
    name: Build ${{ matrix.cibw-only }} wheel

    needs: build_wheels_matrix

    strategy:
      matrix: ${{ fromJson(needs.build_wheels_matrix.outputs.matrix_win) }}

    runs-on: ${{ matrix.os }}

    steps:

    - uses: actions/checkout@v4

    - name: Use Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        release: false
        msystem: ${{ contains(matrix.cibw-only, 'win32') && 'mingw32' || 'ucrt64' }}
        install: make mingw-w64-${{ contains(matrix.cibw-only, 'win32') && 'i686' || 'ucrt-x86_64' }}-gcc

    - name: Setup windows build variables
      id: setup-build-win
      shell:  msys2 {0}
      run: |
        JQ_VERSION=$(ls deps/jq-*.tar.gz | grep -oP 'jq-\K[\d.]+(?=.tar.gz)') 
        echo jq-lib-version="$JQ_VERSION" >> $GITHUB_OUTPUT
        echo arch=$( grep -o 'win_amd64\|win32' <<< ${{matrix.cibw-only}}) >> $GITHUB_OUTPUT
        ${{ contains(matrix.cibw-only, 'win32') && 'echo "C:/msys64/mingw32/bin" >> $GITHUB_PATH' || 'echo no need to set PATH for win_amd64' }}
        printf "[build]\ncompiler=mingw32" > setup.cfg

    - name: Cache pre-built jq lib
      id: cache-prebuilt-jq
      uses: actions/cache@v4
      with:
        path: _deps/build
        key: prebuilt-jq-${{steps.setup-build-win.outputs.jq-lib-version}}-${{ steps.setup-build-win.outputs.arch }}
  
    - name: Build jq lib
      if: steps.cache-prebuilt-jq.outputs.cache-hit != 'true'
      shell: msys2 {0}
      run: make -f build_jq.mk

    - name: Print build identifiers
      run: |
        python -m pip install cibuildwheel==2.17.0
        python -m cibuildwheel --only ${{ matrix.cibw-only }} --print-build-identifiers

    - name: Build wheels
      # if: ${{ (github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')) || matrix.cibw-only == 'cp311-win_amd64' }}
      uses: pypa/cibuildwheel@v2.17.0
      with:
        only: ${{ matrix.cibw-only }}
      env:
        CIBW_ENVIRONMENT:  JQPY_USE_PREBUILT_LIBS=1 ${{ contains(matrix.cibw-only, 'win32') && 'CC=i686-w64-mingw32-gcc.exe' || '' }}

    - uses: actions/upload-artifact@v3
      # if: ${{ (github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')) || matrix.cibw-only == 'cp311-win_amd64' }}
      with:
        path: ./wheelhouse/*.whl

  build_wheels_macosx_arm64:
    name: Build macOS arm64 wheels
    runs-on: macos-14

    steps:

    - uses: actions/checkout@v4

    - name: Use Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Print build identifiers
      run: |
        python -m pip install cibuildwheel==2.17.0
        CIBW_SKIP=cp38-macosx_arm64 python -m cibuildwheel --print-build-identifiers

    - name: Build wheels
      if: ${{ (github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')) }}
      uses: pypa/cibuildwheel@v2.17.0
      env:
        CIBW_SKIP: cp38-macosx_arm64

    - name: Build wheels
      if: ${{ !(github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')) }}
      uses: pypa/cibuildwheel@v2.17.0
      with:
        only: cp310-macosx_arm64

    - uses: actions/upload-artifact@v4
      with:
        path: ./wheelhouse/*.whl
